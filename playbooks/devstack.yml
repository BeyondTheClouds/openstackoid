#   ____                ______           __        _    __
#  / __ \___  ___ ___  / __/ /____ _____/ /_____  (_)__/ /
# / /_/ / _ \/ -_) _ \_\ \/ __/ _ `/ __/  '_/ _ \/ / _  /
# \____/ .__/\__/_//_/___/\__/\_,_/\__/_/\_\\___/_/\_,_/
#     /_/
# Make your OpenStacks Collaborative
#
# Playbook that deploys OpenStack via Devstack.
#

---
- hosts: all
  tasks:
  - name: Install the bare necessities (apt)
    apt:
      name: "{{ item }}"
      update_cache: yes
    loop:
      - git
      - silversearcher-ag
      - sudo
      - vim
      - qemu-utils
      - emacs
    become: true

  - name: Install the bare necessities (pip)
    pip:
      name: "{{ item }}"
      state: latest
    loop:
      - pip
      - ipython
      - ipdb
      - mycli
      - tox
      - virtualenv
      - httpie
    become: true

# ------------------------------------------------------------------------
# -- Devstack download and prepare

  - name: Add stack user
    user:
      name: stack
      shell: /bin/bash
      home: /opt/stack
      system: yes
      groups: adm,sudo,systemd-journal
    become: true

  - name: Make stack user a sudoer
    lineinfile:
      dest: /etc/sudoers.d/stack
      line: "stack ALL=(ALL) NOPASSWD: ALL"
      create: yes
    become: true

#    - name: Always connect as stack user
#      blockinfile:
#        name: ~/.bashrc
#        state: present
#        block: |
#        sudo su stack
#
#  - name: Source OS env at stack connection
#    blockinfile:
#      name: ~/.bashrc
#      state: present
#      block: |
#        . /opt/stack/devstack/openrc admin admin
#        cd ~
#    become: true
#    become_user: stack

  - name: Clone Devstack in /opt/stack/devstack
    git:
      repo: https://opendev.org/openstack/devstack
      version: stable/stein
      dest: /opt/stack/devstack
      force: yes
      update: no
      depth: 1
    become: true
    become_user: stack

  - name: Create the devstack local.conf
    blockinfile:
      path: /opt/stack/devstack/local.conf
      marker: "# {mark} MINIMAL DEVSTACK"
      create: yes
      block: |
        [[local|localrc]]
        ADMIN_PASSWORD=admin
        DATABASE_PASSWORD=$ADMIN_PASSWORD
        RABBIT_PASSWORD=$ADMIN_PASSWORD
        SERVICE_PASSWORD=$ADMIN_PASSWORD
        LIBVIRT_TYPE=qemu
        IP_VERSION=4
        ENABLE_IDENTITY_V2=False
        HOST_IP={{ os_ip }}
        SERVICE_HOST=$HOST_IP
        REGION_NAME={{ os_name }}
        KEYSTONE_REGION_NAME={{ os_name }}

        LIBS_FROM_GIT=keystoneauth
        KEYSTONEAUTH_REPO=https://github.com/BeyondTheClouds/keystoneauth.git
        KEYSTONEAUTH_BRANCH=stable/stein

        USE_PYTHON3=True
        # OSLODB_REPO=https://github.com/BeyondTheClouds/oslo.db
        # OSLODB_BRANCH=cockroachdb/pike

        # Note: Find services in $ENABLED_SERVICES
        disable_service c-api
        disable_service c-sch
        disable_service c-vol
        disable_service horizon
        disable_service tempest

        # enable_plugin rally https://github.com/openstack/rally master

        #enable_plugin osprofiler https://github.com/openstack/osprofiler stable/train
        #OSPROFILER_COLLECTOR=redis

        # [[post-config|$NOVA_CONF]]
        # [profiler]
        # hide_result=False

        [[post-config|$KEYSTONE_CONF]]
        # Disable cache in keystone to force the creation of a token
        # at every request.
        [cache]
        enabled = False
    become: true
    become_user: stack


# ------------------------------------------------------------------------
# -- Better log

  - name: Write log on the disk and make them persistent
    blockinfile:
      path: /etc/systemd/journald.conf
      create: yes
      block: |
        # Store on the disk
        Storage=persistent
        # Do not split journalfd
        SplitMode=none
        # Do not drop log message
        RateLimitInterval=0
        # Do not drop log message
        RateLimitBurst=0
        SystemMaxUse=4G
        RuntimeMaxUse=4G
    become: true

  - name: Restart journald for stack user access
    systemd:
      name: systemd-journald
      state: restarted
    become: true

# ------------------------------------------------------------------------
# -- Run boy run!

  - name: Clear Devstack
    shell: /opt/stack/devstack/unstack.sh  &> /tmp/stack-logs
    args:
      executable: /bin/bash
    become: true
    become_user: stack
    # Playbook fails on the first run because $HOST_IP and
    # $SERVICE_HOST are not yet setted by stack.sh
    ignore_errors: yes

  - name: Start of Devstack deployment
    debug:
      msg:
        - "Follow deployment with:"
        - "vagrant ssh {{ os_name }} -- tail -f /tmp/stack-logs"

  - name: Run boy run
    shell: /opt/stack/devstack/stack.sh &> /tmp/stack-logs
    args:
      executable: /bin/bash
    become: true
    become_user: stack
